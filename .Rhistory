sum_costs <- read.csv("/Users/ziluzhou1/Box Sync/combine2/3-drug-sum-costs-icer.csv")
sum_costs <- read.csv("/Users/zilu/Box Sync/combine2/3-drug-sum-costs-icer.csv")
library(ggplot2)
library(ggrepel)
library(dplyr)
library(tidyr)
icer <- function(results)
{
x <- results %>% arrange(dCOST) %>% mutate(ICER = (lag(dCOST)-dCOST)/(lag(dQALY)-dQALY))
#strong dominance (cross out strategies with a negative ICER)
str.dom <- NULL
if(any(x$ICER[-1]<0)==FALSE) {
x$dominated[2:(nrow(x))] = 0
}
while(any(x$ICER[-1]<0))
{
y <- x %>% filter(ICER<0)
x <- x %>% filter(ICER>0 | is.na(ICER)) %>% arrange(dCOST) %>% mutate(ICER = (dCOST-lag(dCOST))/(dQALY-lag(dQALY)))
x$dominated[2:(nrow(x))] = 0
str.dom <- rbind.fill(str.dom, y)
}
if(is.null(str.dom)==FALSE) {str.dom <- str.dom %>% mutate(ICER=NA, dominated=1)}
#extended dominance (cross out weakly dominated strategies until ICERs always increase with costs)
ext.dom <- NULL
while(any(order(x$ICER[-1])!=1:(nrow(x)-1)))
{
r <- nrow(x)
x$ext.dominated <- NA
for (i in 2:(r-1)) {
x$ext.dominated[i] = as.integer(x$ICER[i] > x$ICER[i+1])
}
y <- x %>% filter(ext.dominated==1)
x <- x %>% filter(ext.dominated==0 | is.na(ext.dominated)) %>% arrange(dCOST) %>% mutate(ICER = (dCOST-lag(dCOST))/(dQALY-lag(dQALY)))
ext.dom <- rbind.fill(ext.dom, y)
}
if(is.null(ext.dom)==FALSE) {ext.dom <- ext.dom %>% mutate(ICER=NA, ext.dominated=1) }
out = plyr::rbind.fill(x, str.dom, ext.dom) %>% arrange(dCOST)
out
}
cost_plane <- function(sum, title) {
dt <- sum
dt$line <- 1
if (any(names(dt) %in% "dominated")==TRUE)
{dt$line[dt$dominated==1] <- 0 }
if (any(names(dt) %in% "ext.dominated")==TRUE)
{dt$line[dt$ext.dominated==1] <- 0}
if (any(names(dt) %in% "Y")==TRUE)
{dt <- dt %>% mutate(label=paste0(preemptive,"-",reactive,"-",X,"-",Y))} # With sensitivity analyses
if (any(names(dt) %in% "Y")==FALSE)
{dt <- dt %>% mutate(label=paste0(preemptive,"-",reactive))}
ggplot(dt, aes(x=dQALY,y=dCOST)) + geom_point() +
geom_line(data=dt[dt$line==1,]) +
geom_label_repel(aes(label=label)) +
ggtitle(title)
}
cost_plane(sum_costs)
cost_plane(sum_costs, "sample cost plane")
cost_plane(sum_costs, "sample cost-effectiveness plane")
load("/private/var/folders/3t/_k_wc14d6sz092sv7zxh5dgm0000gq/T/fz3temp-2/results0.rda")
View(results)
load("/private/var/folders/3t/_k_wc14d6sz092sv7zxh5dgm0000gq/T/fz3temp-2/results_c0.rda")
View(results)
DT <- data.table(results)
print("Summary")
DT[, .N, by = list(resource, preemptive, reactive)]
library(data.table)
DT <- data.table(results)
print("Summary")
DT[, .N, by = list(resource, preemptive, reactive)]
load("/Users/zilu/Desktop/check_cs10_1.rda")
View(d1)
load("/Users/zilu/Desktop/check_cs10_2.rda")
View(d2)
load("/Users/zilu/Desktop/check_ss10_1.rda")
load("/Users/zilu/Desktop/check_ss10_2.rda")
load("/Users/zilu/Desktop/check_ws10_1.rda")
load("/Users/zilu/Desktop/check_ws10_2.rda")
load("/Users/zilu/Desktop/results_sum_ss_10.rda")
View(summary)
189546+25090
load("/Users/zilu/Desktop/check_ss10_1.rda")
### Single Drug - low Weibull
setwd("/Users/zilu/Desktop/right-simulation")
pkg = list("simmer","ggplot2","reshape2","tidyr","msm","data.table", "deSolve","dplyr")
invisible(lapply(pkg, require, character.only = TRUE))
library(Hmisc)
rm(list=ls())
env  <- simmer("RIGHT-v1.1")
exec.simulation <- function(inputs)
{
set.seed(12345)
env  <<- simmer("RIGHT-v1.1")
traj <- simulation(env, inputs)
env %>% create_counters(counters)
env %>%
add_generator("patient", traj, at(rep(0, inputs$vN)), mon=2) %>%
run(365*inputs$vHorizon+1) %>% # Simulate just past horizon
wrap()
get_mon_arrivals(env, per_resource = T)
}
source("/Users/zilu/Box Sync/today/extra.R")
options(digits=5)
inputs$vN <- 100
###Single Drug
inputs$vDrugs = list(vSimvastatin = F,
vWarfarin = F,
vClopidogrel = T)
#inputs$warfarin$vscale_timetowarfarin <- epsilon
#inputs$clopidogrel$vDAPTScale <- epsilon
#inputs$simvastatin$vScale <- epsilon
#inputs$clopidogrel$vRRRepeat.DAPT <- 0 #only for low-weibull runs, to fix retrigger clopidogrel prescription
results <- NULL
attributes <- NULL
for(preemptive in "None")
{
for(reactive in c("None","Single"))
{
if(preemptive == "PREDICT" && reactive == "Panel") {next}
if(preemptive == "PREDICT" && reactive == "Single") {next}
if(preemptive == "Panel" && reactive == "Single") {next}
if(preemptive == "Panel" && reactive == "Panel") {next}
cat("Running ", preemptive, "/", reactive, "\n")
inputs$vPreemptive <- preemptive
inputs$vReactive   <- reactive
run <- exec.simulation(inputs)
run$preemptive <- preemptive
run$reactive   <- reactive
at <- arrange(get_mon_attributes(env),name,key,time)
at$preemptive <- preemptive
at$reactive   <- reactive
if(is.null(results)) { results <- run } else  {results <- rbind(results, run)}
if(is.null(attributes)) { attributes <- at } else  {attributes <- rbind(attributes, at)}
}
}
DT <- data.table(results)
DT[, .N, by = list(resource, preemptive, reactive)]
summary <- DT[, .N, by = list(resource, preemptive, reactive)]
shiny::runApp('~/Desktop/shiny-learn/mytest')
