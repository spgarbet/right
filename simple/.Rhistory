merge(form,by="resource",all.y=TRUE) %>%
mutate(RP=ifelse(is.na(N),0,N)) %>% select(txt,RP,num)
RS <- summary %>% filter(preemptive=="None" & reactive=="Single") %>%
merge(form,by="resource",all.y=TRUE) %>%
mutate(RS=ifelse(is.na(N),0,N)) %>% select(txt,RS,num)
PP <- summary %>% filter(preemptive=="Panel" & reactive=="None") %>%
merge(form,by="resource",all.y=TRUE) %>%
mutate(PP=ifelse(is.na(N),0,N)) %>% select(txt,PP,num)
PRE <- summary %>% filter(preemptive=="PREDICT" & reactive=="None") %>%
merge(form,by="resource",all.y=TRUE) %>%
mutate(PRE=ifelse(is.na(N),0,N)) %>% select(txt,PRE,num)
out <- merge(None,RP,by=c("txt","num")) %>% arrange(num) %>% select(-num)
View(out)
load("/Users/zilu/Desktop/*runs/rerunJan/singlecombined/results_icer_comb_c10.rda")
write.csv(re,file="/Users/zilu/Desktop/cc.csv")
load("/Users/zilu/Desktop/*runs/rerunJan/singlecombined/results_icer_comb_s10.rda")
write.csv(re,file="/Users/zilu/Desktop/cs.csv")
load("/Users/zilu/Desktop/*runs/rerunJan/singlecombined/results_icer_cw10.rda")
write.csv(re,file="/Users/zilu/Desktop/cw.csv")
shiny::runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
shiny::runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
shiny::runApp('Desktop/right-simulation/shiny')
install.packages("shiny")
shiny::runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
trans_strategy <- function(x) {
if(x=="None") {
preemptive=="None"
reactice=="None"
} else if
(x=="Reactive Single") {
preemptive=="None"
reactice=="Single"
} else if
(x=="Universal Preemptive Single") {
preemptive=="Panel"
reactice=="None"
} else if
(x="Targeted Preemptive Single") {
preemptive=="Panel"
reactice=="None"
} else {
preemptive=="Age>=50"
reactice=="None"
}
}
trans_strategy <- function(x) {
if(x=="None") {
preemptive=="None"
reactice=="None"
} else if
(x=="Reactive Single") {
preemptive=="None"
reactice=="Single"
} else if
(x=="Universal Preemptive Single") {
preemptive=="Panel"
reactice=="None"
} else if
(x="Targeted Preemptive Single") {
preemptive=="Panel"
reactice=="None"
} else {
preemptive=="Age>=50"
reactice=="None"
}
}
trans_strategy <- function(x) {
if(x=="None") {
preemptive <- "None"
reactice <- "None"
} else if
(x=="Reactive Single") {
preemptive <- "None"
reactice <- "Single"
} else if
(x=="Universal Preemptive Single") {
preemptive <- "Panel"
reactice <- "None"
} else if
(x=="Targeted Preemptive Single") {
preemptive <- "Panel"
reactice <- "None"
} else {
preemptive <- "Age>=50"
reactice <- "None"
}
}
trans_strategy("None")
trans_strategy <- function(x) {
if(x=="None") {
preemptive <- "None"
reactice <- "None"
} else if
(x=="Reactive Single") {
preemptive <- "None"
reactice <- "Single"
} else if
(x=="Universal Preemptive Single") {
preemptive <- "Panel"
reactice <- "None"
} else if
(x=="Targeted Preemptive Single") {
preemptive <- "Panel"
reactice <- "None"
} else {
preemptive <- "Age>=50"
reactice <- "None"
}
return(list(preemptive=preemptive,reactive=reactive))
}
trans_strategy("None")
trans_strategy <- function(x) {
if(x=="None") {
preemptive <- "None"
reactive <- "None"
} else if
(x=="Reactive Single") {
preemptive <- "None"
reactive <- "Single"
} else if
(x=="Universal Preemptive Single") {
preemptive <- "Panel"
reactive <- "None"
} else if
(x=="Targeted Preemptive Single") {
preemptive <- "Panel"
reactive <- "None"
} else {
preemptive <- "Age>=50"
reactive <- "None"
}
return(list(preemptive=preemptive,reactive=reactive))
}
trans_strategy("None")
load("/Users/zilu/Desktop/*runs/rerunJan/singlecombined/results_sum_comb_c10.rda")
View(summary)
summary[summary$resource=="panel_test"]
summary[summary$resource=="panel_test",]
summary[summary$resource=="panel_test",]$resource
summary[summary$resource=="panel_test",]$resource <- "single_test"
summary[summary$resource=="panel_test",]$resource
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
View(summary)
load("/Users/zilu/Desktop/results_icer_all10_3.rda")
View(re2)
load("/Users/zilu/Desktop/results_icer_all10_4.rda")
load("/Users/zilu/Desktop/results_icer_all10_5.rda")
library(dplyr)
dt_n <- load("/Users/zilu/Desktop/raw_all10_1.rda") %>% filter(preemptive=="None" & reactive=="None")
View(results)
dt <- results %>% select(name,resource)
None <- dt %>% filter(preemptive=="None" & reactive=="None")
n <- length(unique(None$name))
x <- table(subset(None, resource=="st_event")$name)
y <- c(x, rep(0, n-length(x)))
sum(y)
# Look at distribution
h <- hist(y, breaks=0:20 - 0.5)
library(MASS)
est <- fitdistr(y, "negative binomial")
round(h$density, 3)
round(dnbinom(0:5, size=est$estimate['size'], mu=est$estimate['mu']),3)
# Decent parameterization using negative binomial
# Now for the 95% CI, i.e. the expected variance in the count.
n*confint(est)[2,]
# If you really want to be conservative, use the 99%
n*confint(est,level=0.99)[2,]
library(dplyr)
library(dplyr)
None <- dt %>% filter(preemptive=="None" & reactive=="None")
library(tidyr)
None <- dt %>% filter(preemptive=="None" & reactive=="None")
None <- dt %>% dplyr::filter(preemptive=="None" & reactive=="None")
None <- filter(dt,preemptive=="None" & reactive=="None")
library(dplyr)
load("/Users/zilu/Desktop/raw_all10_1.rda")
dt <- results %>% select(name,resource)
None <- filter(dt,preemptive=="None" & reactive=="None")
None <- subset(dt, preemptive=="None" & reactive=="None")
names(results)
None <- dt[dt$preemptive=="None" & dt$reactive=="None",]
View(None)
dt <- results %>% select(name,resource,preemptive,reactive)
None <- results %>% filter(preemptive=="None" & reactive=="None")
None <- dt %>% filter(preemptive=="None" & reactive=="None")
RP <- dt %>% filter(preemptive=="None" & reactive=="Panel")
RP <- dt %>% filter(preemptive=="None" & reactive=="Panel")
RS <- dt %>% filter(preemptive=="None" & reactive=="Single")
PP <- dt %>% filter(preemptive=="Panel" & reactive=="None")
PRE <- dt %>% filter(preemptive=="PREDICT" & reactive=="None")
#None
n <- length(unique(None$name))
x <- table(subset(None, resource=="st_event")$name)
y <- c(x, rep(0, n-length(x)))
sum(y)
# Look at distribution
h <- hist(y, breaks=0:20 - 0.5)
library(MASS)
est <- fitdistr(y, "negative binomial")
round(h$density, 3)
round(dnbinom(0:5, size=est$estimate['size'], mu=est$estimate['mu']),3)
# Decent parameterization using negative binomial
# Now for the 95% CI, i.e. the expected variance in the count.
n*confint(est)[2,]
# If you really want to be conservative, use the 99%
n*confint(est,level=0.99)[2,]
#RS
#None
n <- length(unique(RS$name))
x <- table(subset(RS, resource=="st_event")$name)
y <- c(x, rep(0, n-length(x)))
sum(y)
# Look at distribution
h <- hist(y, breaks=0:20 - 0.5)
est <- fitdistr(y, "negative binomial")
round(h$density, 3)
round(dnbinom(0:5, size=est$estimate['size'], mu=est$estimate['mu']),3)
# Decent parameterization using negative binomial
# Now for the 95% CI, i.e. the expected variance in the count.
n*confint(est)[2,]
#7574.116 7897.884
# If you really want to be conservative, use the 99%
n*confint(est,level=0.99)[2,]
#7523.249 7948.751
#RP
#None
n <- length(unique(RP$name))
x <- table(subset(RP, resource=="st_event")$name)
y <- c(x, rep(0, n-length(x)))
sum(y)
# Look at distribution
h <- hist(y, breaks=0:20 - 0.5)
est <- fitdistr(y, "negative binomial")
round(h$density, 3)
round(dnbinom(0:5, size=est$estimate['size'], mu=est$estimate['mu']),3)
# Decent parameterization using negative binomial
# Now for the 95% CI, i.e. the expected variance in the count.
n*confint(est)[2,]
#6733.055 7030.946
# If you really want to be conservative, use the 99%
n*confint(est,level=0.99)[2,]
#6686.253 7077.748
#PP
#None
n <- length(unique(PP$name))
x <- table(subset(PP, resource=="st_event")$name)
y <- c(x, rep(0, n-length(x)))
sum(y)
# Look at distribution
h <- hist(y, breaks=0:20 - 0.5)
est <- fitdistr(y, "negative binomial")
round(h$density, 3)
round(dnbinom(0:5, size=est$estimate['size'], mu=est$estimate['mu']),3)
# Decent parameterization using negative binomial
# Now for the 95% CI, i.e. the expected variance in the count.
n*confint(est)[2,]
#6733.055 7030.946
# If you really want to be conservative, use the 99%
n*confint(est,level=0.99)[2,]
#6686.253 7077.748
shiny::runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
shiny::runApp('Desktop/right-simulation/shiny')
getwd()
shiny::runApp('Desktop/right-simulation/shiny')
runApp('Desktop/shiny-learn/mytest')
shiny::runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/right-simulation/shiny')
runApp('Desktop/right-simulation/shiny')
pkg = list("simmer",
"ggplot2",
"reshape2",
"plyr", #need to load this before "dplyr"
"tidyr",
"dplyr",
"msm",
"data.table",
"deSolve")
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
load("/Users/zilu/Desktop/*runs/rerunJan/single/results_sum_sw10.rda")
names(summary)
runApp('Desktop/shiny-learn/mytest')
names(summary$N)
colnames(summary$N)
colnames(summary)
names(summary)
names(summary[names(summary)=="N"])
names(summary)[names(summary)=="N"]
names(summary)[1]
names(summary)[2]
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
load("/Users/zilu/Desktop/*runs/rerunJan/single/results_icer_sw10.rda")
View(re)
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
pkg = list("simmer",
"ggplot2",
"reshape2",
"plyr", #need to load this before "dplyr"
"tidyr",
"dplyr",
"msm",
"data.table",
"deSolve")
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
traj %>%
predict_test(inputs) %>%
branch(
function(attrs) attrs[["aGenotyped_CYP2C19"]],
continue=rep(TRUE,2),
create_trajectory() %>% panel_test(inputs) %>% set_attribute("aPredicted", 1), # Something was genotyped via PREDICT, do panel
create_trajectory() %>% timeout(0) # Nothing genotyped, do nothing
)
runApp('Desktop/shiny-learn/mytest')
shiny::runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
shiny::runApp('Desktop/shiny-learn/mytest')
4/30
200/30
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
View(form)
shiny::runApp('Desktop/shiny-learn/mytest')
form$txt
print(form$txt)
print(form)
form$txt <- trimws(form$txt,which="both")
form$txt
form <- data.frame(
txt = c("	  N               	",
"	  Secular Death     	",
"	  Single Test	",
"	  DAPT Start        	",
"	  Clopidogrel       	",
"	  Ticagrelor        	",
"	  Aspirin           	",
"	  DAPT Switch       	",
"	  ST Event	",
"	    ST Fatal          	",
"	    ST CABG            	",
"	    ST PCI          	",
"	  MI Event	",
"	    MI CABG      	",
"	    MI PCI    	",
"	    MI Med Manage     	",
"	  Revasc Event     	",
"	    Revasc CABG   	",
"	    Revasc PCI    	",
"	  Bleed Event	",
"	    Bleed Ext Maj NonFatal  	",
"	    Bleed Int Maj NonFatal  	",
"	    Bleed Min NonFatal  	",
"	    Bleed Fatal       	",
"	    CABG-related Bleed	"),
resource = c("	time_in_model	",
"	secular_death	",
"	single_test	",
"	dapt_start	",
"	clopidogrel	",
"	ticagrelor	",
"	aspirin	",
"	dapt_switched	",
"	st_event	",
"	st_fatal	",
"	st_pci	",
"	st_cabg	",
"	mi_event	",
"	mi_cabg	",
"	mi_pci	",
"	mi_med_manage	",
"	revasc_event	",
"	revasc_cabg	",
"	revasc_pci	",
"	bleed_event	",
"	bleed_ext_maj_nonfatal	",
"	bleed_int_maj_nonfatal	",
"	bleed_min_nonfatal	",
"	bleed_fatal	",
"	cabg_bleed	"))
form$num <- as.numeric(row.names(form))
form$resource <- trimws(form$resource,which="both")
form$txt <- trimws(form$txt,which="right")
runApp('Desktop/shiny-learn/mytest')
View(form)
form$txt[1]
form$txt[1] <- paste0("   ",form$txt[1])
form$txt[1]
form$txt[1] <- paste0("   ",form$txt[1])
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
shiny::runApp('Desktop/shiny-learn/mytest')
install.packages("gridExtra")
library("gridExtra")
A=data.frame(name=c("ABC","XYZ","DEF"),description=c(rep("This is an example for text wrap \nusing grid.draw in package gridExtra",3))
grid.newpage()
grid.table(A)
A <- data.frame(name=c("ABC","XYZ","DEF"),description=c(rep("This is an example for text wrap \nusing grid.draw in package gridExtra",3))
grid.newpage()
A <- data.frame(name=c("ABC","XYZ","DEF"),description=c(rep("This is an example for text wrap \nusing grid.draw in package gridExtra",3))
)
A
grid.newpage()
grid.table(A)
grid.table(form)
runApp('Desktop/shiny-learn/mytest')
runApp('Desktop/shiny-learn/mytest')
shiny::runApp('Desktop/right-simulation/shiny')
load("/Users/zilu/Desktop/results_icer_all10_1.rda")
View(re2)
load("/Users/zilu/Desktop/results_cost_all10_1.rda")
View(re)
load("/Users/zilu/Desktop/results_cost_all10_2.rda")
load("/Users/zilu/Desktop/results_cost_all10_3.rda")
load("/Users/zilu/Desktop/results_cost_all10_4.rda")
load("/Users/zilu/Desktop/results_cost_all10_5.rda")
load("/Users/zilu/Desktop/results_icer_all10_4.rda")
View(re2)
shiny::runApp('Desktop/right-simulation/shiny')
shiny::runApp('Desktop/right-simulation/shiny')
setwd("~/Dropbox/Projects/right-simulation/simple")
setwd("/Users/zilu/Desktop/right-simulation/simple")
####
##
# Set Directories and Load Packages
##
####
rm(list=ls())
pkg = list("simmer",
"ggplot2",
"reshape2",
"plyr", #need to load this before "dplyr"
"tidyr",
"dplyr",
"msm",
"data.table",
"deSolve",
"quantmod")
invisible(lapply(pkg, require, character.only = TRUE))
setwd("/Users/zilu/Desktop/right-simulation/simple")
source("./main_file.R")
##########
#Scratch
###########
#Strategy 0
results <- exec.simulation(inputs)
setwd("/Users/zilu/Desktop/right-simulation/simple")
source("./main_file.R")
##########
#Scratch
###########
#Strategy 0
results <- exec.simulation(inputs)
setwd("/Users/zilu/Desktop/right-simulation/simple")
source("./main_file.R")
##########
#Scratch
###########
#Strategy 0
results <- exec.simulation(inputs)
setwd("/Users/zilu/Desktop/right-simulation/simple")
source("./main_file.R")
##########
#Scratch
###########
#Strategy 0
results <- exec.simulation(inputs)
at(rep(0, inputs$vN))
setwd("/Users/zilu/Desktop/right-simulation/simple")
source("./main_file.R")
##########
#Scratch
###########
#Strategy 0
results <- exec.simulation(inputs)
setwd("/Users/zilu/Desktop/right-simulation/simple")
source("./main_file.R")
results <- exec.simulation(inputs)
env
