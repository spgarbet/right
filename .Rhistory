# Compute total activity times
arrivals$activity_time <- arrivals$end_time - arrivals$start_time
# Computes discounted rate of time
arrivals$discounted_time <- discount_value(value=1,A=arrivals$start_time,B=arrivals$end_time)
# Compute Event base cost map
idx <- function(str) {as.numeric(factor(str, levels=levels(arrivals$resource)))}
base_cost_map <- rep(0, nlevels(arrivals$resource))
sapply(names(inputs$costs), FUN=function(name){
base_cost_map[idx(name)] <<- inputs$costs[[name]]
})
# Compute Disutility cost map
base_disutility_map <- rep(0, nlevels(arrivals$resource))
sapply(names(inputs$disutilities), FUN=function(name){
base_disutility_map[idx(name)] <<- inputs$disutilities[[name]]
})
names(base_disutility_map) = levels(arrivals$resource)
arrivals$cost <- base_cost_map[as.numeric(arrivals$resource)]
arrivals$discounted_cost <- ifelse(arrivals$activity_time>0,
discount_value(value=arrivals$cost,A=arrivals$start_time,B=arrivals$end_time),
discount(value = arrivals$cost,A=arrivals$start_time))
arrivals$disutility = base_disutility_map[arrivals$resource]
type <- data.frame(resource=names(inputs$type),type=unlist(inputs$type),row.names=NULL)
qaly1 <- arrivals %>% group_by(name) %>%
arrange(start_time,desc(end_time)) %>% dplyr::mutate(utility = ifelse(row_number()==1,1,NA)) %>% filter(disutility>0 | utility>0) %>% #cross out events that have no impact on utility
select(name,resource,start_time,end_time,activity_time,disutility) %>%
merge(type,by="resource",all.x=TRUE) %>% #attach type of events: temp vs. permanent disutility
dplyr::mutate(us=disutility,ue=disutility*(-type)) %>%  #us/ue stand for disutility at start/end time: temp event will add back disutility at end time
select(name,start_time,end_time,us,ue,resource,type) %>% melt(id.vars=c("name","resource","us","ue","type")) %>% arrange(value) %>% #separate and spread start/end time
dplyr::mutate(disutility=ifelse(variable=="start_time",us,ue)) %>% arrange(name,value,desc(variable)) %>% #match disutility with start/end time
group_by(name) %>% mutate(time=lead(value)) %>% dplyr::mutate(dtime=ifelse(row_number()>1,time-lag(time),time)) %>% filter(!is.na(dtime)) %>%
filter(!(type==0 & dtime==0)) #For events that permanently reduce utility, this deletes double counts of the event and prevent double counting of disutility
#For temp event, we need to keep two records (start & end) in the datasets in order to adding back disutility at end time
qaly2 <- qaly1 %>% mutate(cum1=ifelse(type==1 | is.na(type),0,disutility)) %>% #For permanent events (type==0), pass disutility to accumulate
group_by(name) %>% mutate(temp_u=1-cumsum(cum1)) %>%
dplyr::mutate(cum2=ifelse(type==0 | is.na(type),0,disutility)) %>% mutate(utility=temp_u-cumsum(cum2)) %>% #For temp events, deduct accumulative disutility from temp_u
filter(utility>0) #do not count negative/zero utility in qaly computation
qaly.i <- qaly2 %>% select(name, value, time, utility) %>%
dplyr::mutate(qaly.d = discount_value(utility,A=value,B=time)) #discounted QALY for each period of time
QALY = qaly.i %>% group_by(name) %>% dplyr::summarise(dQALY = sum(qaly.d)/365.25)
COST = arrivals %>% filter(discounted_cost>0) %>% group_by(name,resource) %>% dplyr::summarise(dCOST = sum(discounted_cost)) %>% merge(cost_cat,by="resource",all.x = TRUE)
avgsum <- data.frame(    dQALY = sum(QALY$dQALY)/inputs$vN,
dCOST = sum(COST$dCOST)/inputs$vN,
dCOST.test = sum(COST$dCOST[COST$cat==1])/inputs$vN,
dCOST.drug = sum(COST$dCOST[COST$cat==2])/inputs$vN,
dCOST.event = sum(COST$dCOST[COST$cat==3])/inputs$vN)
return(avgsum)
}
#######ICER & C/E Plane
library(ggplot2)
library(ggrepel)
library(dplyr)
library(tidyr)
icer <- function(results)
{
x <- results %>% arrange(dCOST) %>% mutate(ICER = (lag(dCOST)-dCOST)/(lag(dQALY)-dQALY))
#strong dominance (cross out strategies with a negative ICER)
str.dom <- NULL
if(any(x$ICER[-1]<0)==FALSE) {
x$dominated[2:(nrow(x))] = 0
}
while(any(x$ICER[-1]<0))
{
y <- x %>% filter(ICER<0)
x <- x %>% filter(ICER>0 | is.na(ICER)) %>% arrange(dCOST) %>% mutate(ICER = (dCOST-lag(dCOST))/(dQALY-lag(dQALY)))
x$dominated[2:(nrow(x))] = 0
str.dom <- rbind.fill(str.dom, y)
}
if(is.null(str.dom)==FALSE) {str.dom <- str.dom %>% mutate(ICER=NA, dominated=1)}
#extended dominance (cross out weakly dominated strategies until ICERs always increase with costs)
ext.dom <- NULL
while(any(order(x$ICER[-1])!=1:(nrow(x)-1)))
{
r <- nrow(x)
x$ext.dominated <- NA
for (i in 2:(r-1)) {
x$ext.dominated[i] = as.integer(x$ICER[i] > x$ICER[i+1])
}
y <- x %>% filter(ext.dominated==1)
x <- x %>% filter(ext.dominated==0 | is.na(ext.dominated)) %>% arrange(dCOST) %>% mutate(ICER = (dCOST-lag(dCOST))/(dQALY-lag(dQALY)))
ext.dom <- rbind.fill(ext.dom, y)
}
if(is.null(ext.dom)==FALSE) {ext.dom <- ext.dom %>% mutate(ICER=NA, ext.dominated=1) }
out = plyr::rbind.fill(x, str.dom, ext.dom) %>% arrange(dCOST)
out
}
### need to adjust labels for strategies
ce_plane <- function(sum, title) {
dt <- sum
dt$line <- 1
if (any(names(dt) %in% "dominated")==TRUE)
{dt$line[dt$dominated==1] <- 0 }
if (any(names(dt) %in% "ext.dominated")==TRUE)
{dt$line[dt$ext.dominated==1] <- 0}
if (any(names(dt) %in% "Y")==TRUE)
{dt <- dt %>% mutate(label=paste0(preemptive,"-",reactive,"-",X,"-",Y))} # With sensitivity analyses
if (any(names(dt) %in% "Y")==FALSE)
{dt <- dt %>% mutate(label=paste0(preemptive,"-",reactive))}
ggplot(dt, aes(x=dQALY,y=dCOST)) + geom_point() +
geom_line(data=dt[dt$line==1,]) +
geom_label_repel(aes(label=label)) +
ggtitle(title)
}
cs <- data.frame(strategy=NA,dQALY=0,dCOST=0)
cs[1,] <- c("None", 8.04353	,	1181.0)
cs[2,] <- c("Reactive Panel", 8.04459	,	1316.3)
cs[3,] <- c("Reactive Single"	,	8.04435	,	1266.7)
cs[4,] <- c("Universal Preemptive Panel"	,	8.04430	,	1467.4)
cs[5,] <- c("Targeted Preemptive Panel"	,	8.04370	,	1251.7)
cs$dCOST <- as.numeric(cs$dCOST)
cs$dQALY <- as.numeric(cs$dQALY)
is <- icer(cs)
ce_plane <- function(sum, title) {
dt <- sum
dt$line <- 1
if (any(names(dt) %in% "dominated")==TRUE)
{dt$line[dt$dominated==1] <- 0 }
if (any(names(dt) %in% "ext.dominated")==TRUE)
{dt$line[dt$ext.dominated==1] <- 0}
if (any(names(dt) %in% "Y")==TRUE)
{dt <- dt %>% mutate(label=paste0(preemptive,"-",reactive,"-",X,"-",Y))} # With sensitivity analyses
if (any(names(dt) %in% "Y")==FALSE)
{dt <- dt %>% mutate(label=strategy)}
ggplot(dt, aes(x=dQALY,y=dCOST)) + geom_point() +
geom_line(data=dt[dt$line==1,]) +
geom_label_repel(aes(label=label)) +
ggtitle(title) +
xlab("Average Quality Adjusted Life Years") +
ylab("Average Cost")
}
ce_plane(is,"Cost-effectiveness Plane")
View(is)
load("/Users/zilu/Desktop/sens_spec_test.rda")
View(results)
DT <- data.table(results)
print("Summary")
DT[, .N, by = list(resource, preemptive, reactive, sens, spec)]
library(data.table)
DT <- data.table(results)
print("Summary")
DT[, .N, by = list(resource, preemptive, reactive, sens, spec)]
DT <- data.table(results) %>% filter(resource=="time_in_model")
DT[, .N, by = list(resource, preemptive, reactive, sens, spec)]
load("/Users/zilu/Desktop/results_cs_test.rda")
raw <- subset(results,preemptive=="Panel")
setwd("/Users/zilu/Desktop/right-simulation")
library(data.table)
library(plyr)
library(dplyr)
library(tidyr)
library(reshape2)
###Costs
source("./costs_new.R")
#inputs$vN <- 100 #change according to combined count
inputs$costs$panel_test <- 0
arrivals <- raw
#arrivals <- results %>%  mutate(name = paste0(name,"_",replication))
# Make all resources a factor (this allows for null events to still get summaries)
arrivals$resource <- factor(arrivals$resource, counters)
# Adjust all event end times from the inputs$durations
mapply(function(value, name){
arrivals[arrivals$resource == name,]$end_time <<-arrivals[arrivals$resource == name,]$start_time + value
}, value=inputs$durations, name=names(inputs$durations) )
# Truncate to end of study or life
end_times <- arrivals[arrivals$resource == 'time_in_model',]
arrivals$end_time <- pmin(arrivals$end_time,
plyr::join(arrivals[,c("name","end_time")], end_times[,c("name","end_time")], by="name", match="first")[,3])
# Compute total activity times
arrivals$activity_time <- arrivals$end_time - arrivals$start_time
# Compute Event base cost map
idx <- function(str) {as.numeric(factor(str, levels=levels(arrivals$resource)))}
base_cost_map <- rep(0, nlevels(arrivals$resource))
sapply(names(inputs$costs), FUN=function(name){
base_cost_map[idx(name)] <<- inputs$costs[[name]]
})
# Compute Disutility cost map
base_disutility_map <- rep(0, nlevels(arrivals$resource))
sapply(names(inputs$disutilities), FUN=function(name){
base_disutility_map[idx(name)] <<- inputs$disutilities[[name]]
})
names(base_disutility_map) = levels(arrivals$resource)
arrivals$cost <- base_cost_map[as.numeric(arrivals$resource)]
arrivals$cum_cost <- ifelse(arrivals$activity_time>0,
arrivals$cost*(arrivals$end_time-arrivals$start_time),
arrivals$cost)
arrivals$disutility = base_disutility_map[arrivals$resource]
type <- data.frame(resource=names(inputs$type),type=unlist(inputs$type),row.names=NULL)
qaly1 <- arrivals %>% group_by(name) %>%
arrange(start_time,desc(end_time)) %>% dplyr::mutate(utility = ifelse(row_number()==1,1,NA)) %>% filter(disutility>0 | utility>0) %>% #cross out events that have no impact on utility
dplyr::select(name,resource,start_time,end_time,activity_time,disutility) %>%
merge(type,by="resource",all.x=TRUE) %>% #attach type of events: temp vs. permanent disutility
dplyr::mutate(us=disutility,ue=disutility*(-type)) %>%  #us/ue stand for disutility at start/end time: temp event will add back disutility at end time
dplyr::select(name,start_time,end_time,us,ue,resource,type) %>% melt(id.vars=c("name","resource","us","ue","type")) %>% arrange(value) %>% #separate and spread start/end time
dplyr::mutate(disutility=ifelse(variable=="start_time",us,ue)) %>% arrange(name,value,desc(variable)) %>% #match disutility with start/end time
group_by(name) %>% mutate(time=lead(value)) %>% dplyr::mutate(dtime=ifelse(row_number()>1,time-lag(time),time)) %>% filter(!is.na(dtime)) %>%
filter(!(type==0 & dtime==0)) #For events that permanently reduce utility, this deletes double counts of the event and prevent double counting of disutility
#For temp event, we need to keep two records (start & end) in the datasets in order to adding back disutility at end time
qaly2 <- qaly1 %>% arrange(name,value,desc(time),variable) %>% mutate(cum1=ifelse(type==1 | is.na(type),0,disutility)) %>% #For permanent events (type==0), pass disutility to accumulate
group_by(name) %>% mutate(temp_u=1-cumsum(cum1)) %>%
dplyr::mutate(cum2=ifelse(type==0 | is.na(type),0,disutility)) %>% mutate(utility=temp_u-cumsum(cum2)) %>% #For temp events, deduct accumulative disutility from temp_u
filter(utility>0) #do not count negative/zero utility in qaly computation
qaly.i <- qaly2 %>% dplyr::select(name, dtime, utility) %>%
dplyr::mutate(qaly = utility*dtime) #discounted QALY for each period of time
#figure out who experience adverse events
namelist <- raw %>% merge(event_cat,by="resource",all.x = TRUE) %>% filter(cat==3) %>% dplyr::select(name) %>% unique() %>% mutate(event=1)
QALY = qaly.i %>% group_by(name) %>% dplyr::summarise(QALY = sum(qaly)/365.25) %>%
merge(namelist,by="name",all.x = TRUE) %>% mutate(event=ifelse(is.na(event),0,1))
View(arrivals)
COST = arrivals %>% filter(cum_cost>0) %>% group_by(name,resource) %>% dplyr::summarise(cost = sum(cum_cost)) %>%
merge(event_cat,by="resource",all.x = TRUE)
View(COST)
COST.c = arrivals %>% filter(cum_cost>0) %>% group_by(name,resource) %>% dplyr::summarise(cost = sum(cum_cost)) %>%
merge(event_cat,by="resource",all.x = TRUE)
COST = COST.c %>% group_by(name) %>% dplyr::summarise(COST = sum(cum_cost))
COST = COST.c %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
View(COST.c)
View(COST)
View(COST.c)
COST.i = arrivals %>% filter(cum_cost>0) %>% group_by(name,resource) %>% dplyr::summarise(cost = sum(cum_cost)) %>%
merge(event_cat,by="resource",all.x = TRUE)
COST = COST.i %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
COST.d = COST.i %>% filter(cat==2) %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
View(COST.i)
View(COST.c)
View(COST.i)
View(COST.d)
View(COST)
View(COST.d)
raw %>% filter(name=="4
patient11")
raw %>% filter(name=="patient11")
out <- merge(QALY,COST,COST.d,by="name",all.x=T) %>%
mutate(COST=ifelse(is.na(COST),0,COST),COST.d=ifelse(is.na(COST.d),0,COST.d)) %>%
mutate(COST.e=COST-COST.d)
COST.i = arrivals %>% filter(cum_cost>0) %>% group_by(name,resource) %>% dplyr::summarise(cost = sum(cum_cost)) %>%
merge(event_cat,by="resource",all.x = TRUE)
COST = COST.i %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
COST.d = COST.i %>% filter(cat==2) %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
COST <- merge(COST,COST.d,by="name",all.x=T)
COST.i = arrivals %>% filter(cum_cost>0) %>% group_by(name,resource) %>% dplyr::summarise(cost = sum(cum_cost)) %>%
merge(event_cat,by="resource",all.x = TRUE)
COST = COST.i %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
COST.d = COST.i %>% filter(cat==2) %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
COST <- merge(COST,COST.d,by="name",all.x=T)
View(COST)
avgsum <- out %>% group_by(event) %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST))
avgsum2 <- out %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST)) %>% mutate(event=9)
avgsum <- rbind(avgsum,avgsum2)
out <- merge(QALY,COST,by="name",all.x=T) %>%
mutate(COST=ifelse(is.na(COST),0,COST),COST.d=ifelse(is.na(COST.d),0,COST.d)) %>%
mutate(COST.e=COST-COST.d)
out <- merge(QALY,COST,by="name",all.x=T)
View(out)
out <- merge(QALY,COST,by="name",all.x=T) %>%
mutate(COST=ifelse(is.na(COST),0,COST),COST.d=ifelse(is.na(COST.d),0,COST.d))
out <- merge(QALY,COST,by="name",all.x=T) %>%
mutate(COST=ifelse(!is.na(COST),COST,0),COST.d=ifelse(!is.na(COST.d),COST.d,0)) %>%
mutate(COST.e=COST-COST.d)
View(out)
View(COST)
COST = COST.i %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
COST.d = COST.i %>% filter(cat==2) %>% group_by(name) %>% dplyr::summarise(COST.d = sum(cost))
COST <- merge(COST,COST.d,by="name",all.x=T)
out <- merge(QALY,COST,by="name",all.x=T) %>%
mutate(COST=ifelse(!is.na(COST),COST,0),COST.d=ifelse(!is.na(COST.d),COST.d,0)) %>%
mutate(COST.e=COST-COST.d)
View(out)
avgsum <- out %>% group_by(event) %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST))
avgsum2 <- out %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST)) %>% mutate(event=9)
avgsum <- rbind(avgsum,avgsum2)
View(avgsum)
avgsum <- out %>% group_by(event) %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST))
View(avgsum)
View(avgsum2)
avgsum2 <- out %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST), COST.d=mean(COST.d),COST.e=mean(COST.e)) %>% mutate(event=9)
View(avgsum2)
avgsum <- rbind(avgsum,avgsum2)
View(avgsum2)
View(avgsum)
View(avgsum2)
View(avgsum)
View(avgsum2)
avgsum <- out %>% group_by(event) %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST),COST.d=mean(COST.d),COST.e=mean(COST.e))
avgsum2 <- out %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST), COST.d=mean(COST.d),COST.e=mean(COST.e)) %>% mutate(event=9)
avgsum <- rbind(avgsum,avgsum2)
View(avgsum)
load("/Users/zilu/Desktop/SCCS/graves_sccs_09272013.rdata")
View(graves_sccs_09272013)
names(graves_sccs_09272013)
cb <- read.csv("/Users/zilu/Desktop/SCCS/SCCS_codebooks.csv")
View(cb)
table(cb$codebook)
load("/Users/zilu/Desktop/results_sum_ss_10.rda")
View(summary)
load("/Users/zilu/Desktop/results_raw_ss_10.rda")
results %>% filter(resource=="cvd_death")
raw <- results %>% filter(name %in% c("patient74277_b0","patient4641_b0")) %>% filter(preemptive=="None")
arrivals <- raw
#arrivals <- results %>%  mutate(name = paste0(name,"_",replication))
# Make all resources a factor (this allows for null events to still get summaries)
arrivals$resource <- factor(arrivals$resource, counters)
# Adjust all event end times from the inputs$durations
mapply(function(value, name){
arrivals[arrivals$resource == name,]$end_time <<-arrivals[arrivals$resource == name,]$start_time + value
}, value=inputs$durations, name=names(inputs$durations) )
# Truncate to end of study or life
end_times <- arrivals[arrivals$resource == 'time_in_model',]
arrivals$end_time <- pmin(arrivals$end_time,
plyr::join(arrivals[,c("name","end_time")], end_times[,c("name","end_time")], by="name", match="first")[,3])
# Compute total activity times
arrivals$activity_time <- arrivals$end_time - arrivals$start_time
# Compute Event base cost map
idx <- function(str) {as.numeric(factor(str, levels=levels(arrivals$resource)))}
base_cost_map <- rep(0, nlevels(arrivals$resource))
sapply(names(inputs$costs), FUN=function(name){
base_cost_map[idx(name)] <<- inputs$costs[[name]]
})
# Compute Disutility cost map
base_disutility_map <- rep(0, nlevels(arrivals$resource))
sapply(names(inputs$disutilities), FUN=function(name){
base_disutility_map[idx(name)] <<- inputs$disutilities[[name]]
})
names(base_disutility_map) = levels(arrivals$resource)
arrivals$cost <- base_cost_map[as.numeric(arrivals$resource)]
arrivals$cum_cost <- ifelse(arrivals$activity_time>0,
arrivals$cost*(arrivals$end_time-arrivals$start_time),
arrivals$cost)
arrivals$disutility = base_disutility_map[arrivals$resource]
type <- data.frame(resource=names(inputs$type),type=unlist(inputs$type),row.names=NULL)
qaly1 <- arrivals %>% group_by(name) %>%
arrange(start_time,desc(end_time)) %>% dplyr::mutate(utility = ifelse(row_number()==1,1,NA)) %>% filter(disutility>0 | utility>0) %>% #cross out events that have no impact on utility
dplyr::select(name,resource,start_time,end_time,activity_time,disutility) %>%
merge(type,by="resource",all.x=TRUE) %>% #attach type of events: temp vs. permanent disutility
dplyr::mutate(us=disutility,ue=disutility*(-type)) %>%  #us/ue stand for disutility at start/end time: temp event will add back disutility at end time
dplyr::select(name,start_time,end_time,us,ue,resource,type) %>% melt(id.vars=c("name","resource","us","ue","type")) %>% arrange(value) %>% #separate and spread start/end time
dplyr::mutate(disutility=ifelse(variable=="start_time",us,ue)) %>% arrange(name,value,desc(variable)) %>% #match disutility with start/end time
group_by(name) %>% mutate(time=lead(value)) %>% dplyr::mutate(dtime=ifelse(row_number()>1,time-lag(time),time)) %>% filter(!is.na(dtime)) %>%
filter(!(type==0 & dtime==0)) #For events that permanently reduce utility, this deletes double counts of the event and prevent double counting of disutility
#For temp event, we need to keep two records (start & end) in the datasets in order to adding back disutility at end time
qaly2 <- qaly1 %>% arrange(name,value,desc(time),variable) %>% mutate(cum1=ifelse(type==1 | is.na(type),0,disutility)) %>% #For permanent events (type==0), pass disutility to accumulate
group_by(name) %>% mutate(temp_u=1-cumsum(cum1)) %>%
dplyr::mutate(cum2=ifelse(type==0 | is.na(type),0,disutility)) %>% mutate(utility=temp_u-cumsum(cum2)) %>% #For temp events, deduct accumulative disutility from temp_u
filter(utility>0) #do not count negative/zero utility in qaly computation
qaly.i <- qaly2 %>% dplyr::select(name, dtime, utility) %>%
dplyr::mutate(qaly = utility*dtime) #discounted QALY for each period of time
#figure out who experience adverse events
namelist <- raw %>% merge(event_cat,by="resource",all.x = TRUE) %>% filter(cat==3) %>% dplyr::select(name) %>% unique() %>% mutate(event=1)
QALY = qaly.i %>% group_by(name) %>% dplyr::summarise(QALY = sum(qaly)/365.25) %>%
merge(namelist,by="name",all.x = TRUE) %>% mutate(event=ifelse(is.na(event),0,1))
COST.i = arrivals %>% filter(cum_cost>0) %>% group_by(name,resource) %>% dplyr::summarise(cost = sum(cum_cost)) %>%
merge(event_cat,by="resource",all.x = TRUE)
COST = COST.i %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
COST.d = COST.i %>% filter(cat==2) %>% group_by(name) %>% dplyr::summarise(COST.d = sum(cost))
COST <- merge(COST,COST.d,by="name",all.x=T)
out <- merge(QALY,COST,by="name",all.x=T) %>%
mutate(COST=ifelse(!is.na(COST),COST,0),COST.d=ifelse(!is.na(COST.d),COST.d,0)) %>%
mutate(COST.e=COST-COST.d)
avgsum <- out %>% group_by(event) %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST),COST.d=mean(COST.d),COST.e=mean(COST.e))
avgsum2 <- out %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST), COST.d=mean(COST.d),COST.e=mean(COST.e)) %>% mutate(event=9)
avgsum <- rbind(avgsum,avgsum2)
View(qaly.i)
View(qaly1)
View(COST)
View(COST.c)
View(COST.i)
inputs$costs$cvd_death
inputs$costs
results %>% filter(resource=="rahbdo_death")
raw <- results %>% filter(name %in% c("patient186438_b6","patient80331_b9")) %>% filter(preemptive=="None")
arrivals <- raw
#arrivals <- results %>%  mutate(name = paste0(name,"_",replication))
# Make all resources a factor (this allows for null events to still get summaries)
arrivals$resource <- factor(arrivals$resource, counters)
# Adjust all event end times from the inputs$durations
mapply(function(value, name){
arrivals[arrivals$resource == name,]$end_time <<-arrivals[arrivals$resource == name,]$start_time + value
}, value=inputs$durations, name=names(inputs$durations) )
# Truncate to end of study or life
end_times <- arrivals[arrivals$resource == 'time_in_model',]
arrivals$end_time <- pmin(arrivals$end_time,
plyr::join(arrivals[,c("name","end_time")], end_times[,c("name","end_time")], by="name", match="first")[,3])
# Compute total activity times
arrivals$activity_time <- arrivals$end_time - arrivals$start_time
# Compute Event base cost map
idx <- function(str) {as.numeric(factor(str, levels=levels(arrivals$resource)))}
base_cost_map <- rep(0, nlevels(arrivals$resource))
sapply(names(inputs$costs), FUN=function(name){
base_cost_map[idx(name)] <<- inputs$costs[[name]]
})
# Compute Disutility cost map
base_disutility_map <- rep(0, nlevels(arrivals$resource))
sapply(names(inputs$disutilities), FUN=function(name){
base_disutility_map[idx(name)] <<- inputs$disutilities[[name]]
})
names(base_disutility_map) = levels(arrivals$resource)
arrivals$cost <- base_cost_map[as.numeric(arrivals$resource)]
arrivals$cum_cost <- ifelse(arrivals$activity_time>0,
arrivals$cost*(arrivals$end_time-arrivals$start_time),
arrivals$cost)
arrivals$disutility = base_disutility_map[arrivals$resource]
type <- data.frame(resource=names(inputs$type),type=unlist(inputs$type),row.names=NULL)
qaly1 <- arrivals %>% group_by(name) %>%
arrange(start_time,desc(end_time)) %>% dplyr::mutate(utility = ifelse(row_number()==1,1,NA)) %>% filter(disutility>0 | utility>0) %>% #cross out events that have no impact on utility
dplyr::select(name,resource,start_time,end_time,activity_time,disutility) %>%
merge(type,by="resource",all.x=TRUE) %>% #attach type of events: temp vs. permanent disutility
dplyr::mutate(us=disutility,ue=disutility*(-type)) %>%  #us/ue stand for disutility at start/end time: temp event will add back disutility at end time
dplyr::select(name,start_time,end_time,us,ue,resource,type) %>% melt(id.vars=c("name","resource","us","ue","type")) %>% arrange(value) %>% #separate and spread start/end time
dplyr::mutate(disutility=ifelse(variable=="start_time",us,ue)) %>% arrange(name,value,desc(variable)) %>% #match disutility with start/end time
group_by(name) %>% mutate(time=lead(value)) %>% dplyr::mutate(dtime=ifelse(row_number()>1,time-lag(time),time)) %>% filter(!is.na(dtime)) %>%
filter(!(type==0 & dtime==0)) #For events that permanently reduce utility, this deletes double counts of the event and prevent double counting of disutility
#For temp event, we need to keep two records (start & end) in the datasets in order to adding back disutility at end time
qaly2 <- qaly1 %>% arrange(name,value,desc(time),variable) %>% mutate(cum1=ifelse(type==1 | is.na(type),0,disutility)) %>% #For permanent events (type==0), pass disutility to accumulate
group_by(name) %>% mutate(temp_u=1-cumsum(cum1)) %>%
dplyr::mutate(cum2=ifelse(type==0 | is.na(type),0,disutility)) %>% mutate(utility=temp_u-cumsum(cum2)) %>% #For temp events, deduct accumulative disutility from temp_u
filter(utility>0) #do not count negative/zero utility in qaly computation
qaly.i <- qaly2 %>% dplyr::select(name, dtime, utility) %>%
dplyr::mutate(qaly = utility*dtime) #discounted QALY for each period of time
#figure out who experience adverse events
namelist <- raw %>% merge(event_cat,by="resource",all.x = TRUE) %>% filter(cat==3) %>% dplyr::select(name) %>% unique() %>% mutate(event=1)
QALY = qaly.i %>% group_by(name) %>% dplyr::summarise(QALY = sum(qaly)/365.25) %>%
merge(namelist,by="name",all.x = TRUE) %>% mutate(event=ifelse(is.na(event),0,1))
COST.i = arrivals %>% filter(cum_cost>0) %>% group_by(name,resource) %>% dplyr::summarise(cost = sum(cum_cost)) %>%
merge(event_cat,by="resource",all.x = TRUE)
COST = COST.i %>% group_by(name) %>% dplyr::summarise(COST = sum(cost))
COST.d = COST.i %>% filter(cat==2) %>% group_by(name) %>% dplyr::summarise(COST.d = sum(cost))
COST <- merge(COST,COST.d,by="name",all.x=T)
out <- merge(QALY,COST,by="name",all.x=T) %>%
mutate(COST=ifelse(!is.na(COST),COST,0),COST.d=ifelse(!is.na(COST.d),COST.d,0)) %>%
mutate(COST.e=COST-COST.d)
avgsum <- out %>% group_by(event) %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST),COST.d=mean(COST.d),COST.e=mean(COST.e))
avgsum2 <- out %>% dplyr::summarise(N=n(),QALY=mean(QALY),COST = mean(COST), COST.d=mean(COST.d),COST.e=mean(COST.e)) %>% mutate(event=9)
avgsum <- rbind(avgsum,avgsum2)
View(COST.i)
View(COST)
View(COST.c)
View(COST)
View(COST.c)
View(COST)
View(COST.c)
t,(COST.c)
rm(COST.c)
View(COST.d)
View(COST.i)
View(COST)
View(COST.d)
View(COST.i)
View(avgsum2)
View(avgsum)
table(cb$codebook)
table(cb$domain)
load("/Users/zilu/Desktop/results_cs_test.rda")
s1 <- cost.qaly(subset(results,preemptive=="None" & reactive=="None"),inputs) %>% mutate(strategy="None")
s2 <- cost.qaly(subset(results,preemptive=="Panel" & reactive=="None"),inputs) %>% mutate(strategy="Genotyped")
print("sum_costs")
d1 <- rbind(s1[s1$event!=9,],s2[s1$event!=9,]) %>%
recast(strategy ~ variable + event, id.var = c("strategy", "event")) %>%
mutate(rAE=N_1/(N_1+N_0),diffQALY=QALY_1-QALY_0,diffCOST=COST_1-COST_0) %>%
mutate(deltar=rAE-lag(rAE),deltaQ=diffQALY-lag(diffQALY),deltaC=diffCOST-lag(diffCOST))
d2 <- rbind(s1[s1$event==9,],s2[s2$event==9,]) %>% mutate(diffQ=QALY-lag(QALY),diffC=COST-lag(COST),diffCd=COST.d-lag(COST.d),diffCe=COST.e-lag(COST.e)) %>%
mutate(event=NULL,N=NULL)
#%>% mutate(NMB=(QALY*50000)-COST) %>% mutate(diff=NMB-lag(NMB))
d1
d2
d1 <- rbind(s1[s1$event!=9,],s2[s1$event!=9,]) %>%
recast(strategy ~ variable + event, id.var = c("strategy", "event")) %>%
mutate(rAE=N_1/(N_1+N_0),diffQALY=QALY_1-QALY_0,diffCOST=COST_1-COST_0) %>%
mutate(deltar=rAE-lag(rAE),deltaQ=diffQALY-lag(diffQALY),deltaC=diffCOST-lag(diffCOST))
d2 <- rbind(s1[s1$event==9,],s2[s2$event==9,]) %>% mutate(diffQ=QALY-lag(QALY),diffC=COST-lag(COST),diffCd=COST.d-lag(COST.d),diffCe=COST.e-lag(COST.e))
d1 <- rbind(s1[s1$event!=9,],s2[s1$event!=9,]) %>%
recast(strategy ~ variable + event, id.var = c("strategy", "event")) %>%
mutate(rAE=N_1/(N_1+N_0),diffQALY=QALY_1-QALY_0,diffCOST=COST_1-COST_0) %>%
mutate(deltar=rAE-lag(rAE),deltaQ=diffQALY-lag(diffQALY),deltaC=diffCOST-lag(diffCOST))
View(d1)
d2 <- rbind(s1[s1$event==9,],s2[s2$event==9,]) %>% mutate(diffQ=QALY-lag(QALY),diffC=COST-lag(COST),diffCd=COST.d-lag(COST.d),diffCe=COST.e-lag(COST.e))
#%>% mutate(NMB=(QALY*50000)-COST) %>% mutate(diff=NMB-lag(NMB))
s1 <- cost.qaly(subset(results,preemptive=="None" & reactive=="None"),inputs) %>% mutate(strategy="None")
s2 <- cost.qaly(subset(results,preemptive=="Panel" & reactive=="None"),inputs) %>% mutate(strategy="Genotyped")
print("sum_costs")
d1 <- rbind(s1[s1$event!=9,],s2[s1$event!=9,]) %>%
recast(strategy ~ variable + event, id.var = c("strategy", "event")) %>%
mutate(rAE=N_1/(N_1+N_0),diffQALY=QALY_1-QALY_0,diffCOST=COST_1-COST_0) %>%
mutate(deltar=rAE-lag(rAE),deltaQ=diffQALY-lag(diffQALY),deltaC=diffCOST-lag(diffCOST))
d2 <- rbind(s1[s1$event==9,],s2[s2$event==9,]) %>% mutate(diffQ=QALY-lag(QALY),diffC=COST-lag(COST))
View(d2)
d2 <- rbind(s1[s1$event==9,],s2[s2$event==9,]) %>% mutate(diffQ=QALY-lag(QALY),diffC=COST-lag(COST),diffCd=COST.d-lag(COST.d),diffCe=COST.e-lag(COST.e))
View(d2)
rbind(s1[s1$event==9,],s2[s2$event==9,])
S1
s1
s2
###Costs
source("./costs_new.R")
#inputs$vN <- 100 #change according to combined count
inputs$costs$panel_test <- 0
s1 <- cost.qaly(subset(results,preemptive=="None" & reactive=="None"),inputs) %>% mutate(strategy="None")
s2 <- cost.qaly(subset(results,preemptive=="Panel" & reactive=="None"),inputs) %>% mutate(strategy="Genotyped")
View(s1)
View(s2)
s1 <- cost.qaly(subset(results,preemptive=="None" & reactive=="None"),inputs) %>% mutate(strategy="None")
s2 <- cost.qaly(subset(results,preemptive=="Panel" & reactive=="None"),inputs) %>% mutate(strategy="Genotyped")
print("sum_costs")
d1 <- rbind(s1[s1$event!=9,],s2[s1$event!=9,]) %>%
recast(strategy ~ variable + event, id.var = c("strategy", "event")) %>%
mutate(rAE=N_1/(N_1+N_0),diffQALY=QALY_1-QALY_0,diffCOST=COST_1-COST_0) %>%
mutate(deltar=rAE-lag(rAE),deltaQ=diffQALY-lag(diffQALY),deltaC=diffCOST-lag(diffCOST))
View(d1)
d2 <- rbind(s1[s1$event==9,],s2[s2$event==9,]) %>% mutate(diffQ=QALY-lag(QALY),diffC=COST-lag(COST),diffCd=COST.d-lag(COST.d),diffCe=COST.e-lag(COST.e))
#%>% mutate(NMB=(QALY*50000)-COST) %>% mutate(diff=NMB-lag(NMB))
View(d2)
View(cb)
table(cb$domain)
load("/Users/zilu/Desktop/check_ss10_2.rda")
View(d2)
