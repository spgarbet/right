source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vReactive = "Panel"
inputs$vPreemptive = "None"
inputs$warfarin$vPREDICTsens = 1
inputs$warfarin$vvPREDICTspec = 1
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Results  =        rbind.data.frame(cbind(strategy  = "Baseline",Baseline_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST))) ,
cbind(strategy= "PREDICT_Panel",PREDICT_Panel_summary %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST))),
cbind(strategy= "Reactive_Ideal",Reactive_Ideal_summary %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST))))
icer <- function(results)
{
results <- results %>% arrange(dCOST) %>% mutate(ICER = (lag(dCOST)-dCOST)/(lag(dQALY)-dQALY),dominated = as.integer(ICER<0))
dominated <- results %>%  filter(dominated==1)
not.dom <- results %>% filter(dominated==0 | is.na(dominated)) %>%  arrange(dCOST) %>% mutate(ICER = (lag(dCOST)-dCOST)/(lag(dQALY)-dQALY),ext.dominated = as.integer(ICER<0))
out = plyr::rbind.fill(not.dom,dominated) %>% arrange(dCOST)
out
}
icer(Results[c(1,2,3),])
# Compare Event COunts
sc1 = Baseline_events
sc2 = PREDICT_Panel_events
compare = merge((Statin_Baseline_eventcount <- sc1 %>% count(resource) %>% data.frame()),(Statin_PGx_eventcount <- sc2 %>% count(resource) %>% data.frame()),"resource",all.x=TRUE,all.y=TRUE) %>% mutate(diff=n.y-n.x)
dif <- compare
write.csv(dif,file="~/Desktop/baseline-vs-PREDICT.csv")
# Time to First Drug
foo <- costs  %>% filter(resource=="simvastatin" | resource=="clopidogrel")  %>% arrange(name,start_time)  %>% group_by(name)  %>% filter(row_number()==1)
quantile(foo$start_time/365,c(0.025,0.1,0.25,0.5,0.75,0.95))
mean(foo$start_time/365)
rm(list=ls())
library(parallel)
setwd("/Users/zilu/Desktop/right-simulation")
source("./analysis/extra-functions.r")
pkg = list("simmer","dplyr","ggplot2","reshape2","tidyr","msm")
invisible(lapply(pkg, require, character.only = TRUE))
####
##
# Set Number of Patients (per iteration)
##
####
vNN = 100
load("./main/cpi.Rdata")
####
##
# Warfarin Only: Baseline
##
####
Scenario.Name = "Baseline"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "None"
inputs$vDrugs       = list(vSimvastatin = FALSE,
vWarfarin = TRUE,
vClopidogrel = FALSE)
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
#attributes <- arrange(get_mon_attributes(env),name,key,time)
#first.attributes <- spread(attributes %>% group_by(name,key) %>% summarize(first = first(value)),key,first)
#last.attributes <- spread(attributes %>% group_by(name,key) %>% summarize(last = last(value)),key,last)
#all.attributes <- spread(attributes %>% group_by(name,key,time) %>% summarize(first = mean(value)),key,first)
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Baseline_events %>% count(resource) %>% data.frame()
s1 <- cbind(strategy  = "Baseline", Baseline_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST))
)
View(s1)
Warfarin_Baseline <- cbind(strategy  = "Baseline", Baseline_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
View(Baseline_events)
#preemptive panel
Scenario.Name = "PrePanel"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "Panel"
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
PrePanel_events %>% count(resource) %>% data.frame()
Warfarin_PrePanel <- cbind(strategy  = "PrePanel", PrePanel_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
View(Warfarin_Baseline)
View(Warfarin_PrePanel)
#predict panel
Scenario.Name = "Predict_Panel"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "PREDICT"
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Predict_Panel_events %>% count(resource) %>% data.frame()
Warfarin_Predict_Panel <- cbind(strategy  = "Predict_Panel", PrePanel_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
Warfarin_Predict_Panel <- cbind(strategy  = "Predict_Panel", Predict_Panel_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
rm(list=ls())
library(parallel)
setwd("/Users/zilu/Desktop/right-simulation")
source("./analysis/extra-functions.r")
pkg = list("simmer","dplyr","ggplot2","reshape2","tidyr","msm")
invisible(lapply(pkg, require, character.only = TRUE))
####
##
# Set Number of Patients (per iteration)
##
####
vNN = 100
load("./main/cpi.Rdata")
####
##
# Warfarin Only: Baseline
##
####
Scenario.Name = "Baseline"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "None"
inputs$vDrugs       = list(vSimvastatin = FALSE,
vWarfarin = TRUE,
vClopidogrel = FALSE)
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
#attributes <- arrange(get_mon_attributes(env),name,key,time)
#first.attributes <- spread(attributes %>% group_by(name,key) %>% summarize(first = first(value)),key,first)
#last.attributes <- spread(attributes %>% group_by(name,key) %>% summarize(last = last(value)),key,last)
#all.attributes <- spread(attributes %>% group_by(name,key,time) %>% summarize(first = mean(value)),key,first)
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Baseline_events %>% count(resource) %>% data.frame()
Warfarin_Baseline <- cbind(strategy  = "Baseline", Baseline_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
#preemptive panel
Scenario.Name = "PrePanel"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "Panel"
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
PrePanel_events %>% count(resource) %>% data.frame()
Warfarin_PrePanel <- cbind(strategy  = "PrePanel", PrePanel_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
#predict panel
Scenario.Name = "Predict_Panel"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "PREDICT"
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Predict_Panel_events %>% count(resource) %>% data.frame()
Warfarin_Predict_Panel <- cbind(strategy  = "Predict_Panel", Predict_Panel_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
#Reactive Panel
Scenario.Name = "Reactive"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "Panel"
inputs$vPreemptive = "None"
inputs$warfarin$vPREDICTsens = 1
inputs$warfarin$vPREDICTspec = 1
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Reactive_events %>% count(resource) %>% data.frame()
Warfarin_Reactive <- cbind(strategy  = "Reactive", Reactive_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
Warfarin.Compare  = rbind.data.frame(Warfarin_Baseline, Warfarin_PrePanel, Warfarin_Predict_Panel, Warfarin_Reactive)
Warfarin.Compare %>% filter(!grepl("Perf",strategy)) %>%  arrange(dCOST)  %>% mutate(ICER = (lag(dCOST)-dCOST)/(lag(dQALY)-dQALY),dominated = as.integer(ICER<0))
sc1 = Baseline_events
sc2 = PrePanel_events
sc3 = Predict_Panel_events
sc4 = Reactive_events
compare = merge((Baseline_eventcount <- sc1 %>% count(resource) %>% data.frame()),(PrePanel_eventcount <- sc2 %>% count(resource) %>% data.frame()),
(Predict_Panel_eventcount <- sc3 %>% count(resource) %>% data.frame()),(Reactive_eventcount <- sc4 %>% count(resource) %>% data.frame()),
"resource",all.x=TRUE,all.y=TRUE) %>% mutate(diff=n.y-n.x)
Baseline_eventcount <- sc1 %>% count(resource) %>% data.frame()
sc1 %>% count(resource)
sc2 %>% count(resource)
sc3 %>% count(resource)
sc4 %>% count(resource)
event_sum <- cbind(list(sc1,sc2,sc3,sc4))
View(event_sum)
event_sum <- cbind(sc1,sc2,sc3,sc4)
rm(list=ls())
library(parallel)
setwd("/Users/zilu/Desktop/right-simulation")
source("./analysis/extra-functions.r")
pkg = list("simmer","dplyr","ggplot2","reshape2","tidyr","msm")
invisible(lapply(pkg, require, character.only = TRUE))
####
##
# Set Number of Patients (per iteration)
##
####
vNN = 100
load("./main/cpi.Rdata")
####
##
# Warfarin Only: Baseline
##
####
Scenario.Name = "Baseline"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "None"
inputs$vDrugs       = list(vSimvastatin = FALSE,
vWarfarin = TRUE,
vClopidogrel = FALSE)
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
#attributes <- arrange(get_mon_attributes(env),name,key,time)
#first.attributes <- spread(attributes %>% group_by(name,key) %>% summarize(first = first(value)),key,first)
#last.attributes <- spread(attributes %>% group_by(name,key) %>% summarize(last = last(value)),key,last)
#all.attributes <- spread(attributes %>% group_by(name,key,time) %>% summarize(first = mean(value)),key,first)
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Baseline_events %>% count(resource) %>% data.frame()
Warfarin_Baseline <- cbind(strategy  = "Baseline", Baseline_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
#preemptive panel
Scenario.Name = "PrePanel"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "Panel"
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
PrePanel_events %>% count(resource) %>% data.frame()
Warfarin_PrePanel <- cbind(strategy  = "PrePanel", PrePanel_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
#predict panel
Scenario.Name = "Predict_Panel"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "None"
inputs$vPreemptive = "PREDICT"
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Predict_Panel_events %>% count(resource) %>% data.frame()
Warfarin_Predict_Panel <- cbind(strategy  = "Predict_Panel", Predict_Panel_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
#Reactive Panel
Scenario.Name = "Reactive"
env  <- simmer(Scenario.Name)
source("./inputs.R")
inputs$vNIter = 8
inputs$vN = vNN
inputs$vUpperAge    = 65
inputs$vLowerAge    = 65
inputs$vHorizon     = 100
inputs$vReactive = "Panel"
inputs$vPreemptive = "None"
inputs$warfarin$vPREDICTsens = 1
inputs$warfarin$vPREDICTspec = 1
source("./right-main-simulation-parallel.R")
source('./main/event_main_loop.R')
s = 12345
ptm <- proc.time()
env  = exec.simulation(s=s)
arrivals  <- get_mon_arrivals(env, per_resource = T) %>%  mutate(name = paste0(name,"_",replication))
source("./costs.R")
run.stats = cost.qaly(env,inputs)
events = run.stats[["arrivals"]] %>% arrange(start_time,end_time)
events  %>% filter(name %in% c("patient0_1","patient0_8")) %>% arrange(name)
costs = run.stats[["cost"]]
qaly = run.stats[["qaly"]]
summary = run.stats[["summary"]]
assign(paste0(Scenario.Name,"_sim"),env)
assign(paste0(Scenario.Name,"_events"),events)
assign(paste0(Scenario.Name,"_costs"),costs)
assign(paste0(Scenario.Name,"_qaly"),qaly)
assign(paste0(Scenario.Name,"_summary"),summary)
(timer2 = proc.time() - ptm)
Reactive_events %>% count(resource) %>% data.frame()
Warfarin_Reactive <- cbind(strategy  = "Reactive", Reactive_summary  %>% summarise(dQALY = mean(dQALY), dCOST=mean(dCOST)))
Warfarin.Compare  = rbind.data.frame(Warfarin_Baseline, Warfarin_PrePanel, Warfarin_Predict_Panel, Warfarin_Reactive)
Warfarin.Compare %>% filter(!grepl("Perf",strategy)) %>%  arrange(dCOST)  %>% mutate(ICER = (lag(dCOST)-dCOST)/(lag(dQALY)-dQALY),dominated = as.integer(ICER<0))
sc1 = Baseline_events %>% count(resource) %>% data.frame()
sc2 = PrePanel_events %>% count(resource) %>% data.frame()
sc3 = Predict_Panel_events %>% count(resource) %>% data.frame()
sc4 = Reactive_events %>% count(resource) %>% data.frame()
sc1
sc2
sc3
sc4
